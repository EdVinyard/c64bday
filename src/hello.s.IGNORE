;
; File generated by cc65 v 2.16 - Ubuntu 2.16-2
;
	.fopt		compiler,"cc65 v 2.16 - Ubuntu 2.16-2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.macpack	longbranch
	.forceimport	__STARTUP__
	; .import		_printf
	.export		_main
	.linecont	+

.segment	"RODATA"
; L0003:		; "Hello, World!"
	; .byte	$C8,$45,$4C,$4C,$4F,$2C,$20,$46,$4F,$4C,$4B,$53,$21,$0D,$00
BAR:
	; 256 bytes
	.byte  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
START:
	.byte 1
END:
	.byte 30
EMPTY_BLOCK:
	.byte 96			; FULL_BLOCK - 128
FULL_BLOCK:
	.byte 224 			; EMPTY_BLOCK + 128

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

; initialize the array that describes the animation frames
	;  96,103,106,118,225,245,244,229,\
    ; 224,231,234,246, 97,117,116,101

	lda #96		; blank
	ldx START
INITLOOP:
	sta $0400,x
	inx
	cpx END
	bne INITLOOP

	ldx #96
	lda #96;#103
	sta BAR,x
	ldx #103
	lda #106
	sta BAR,x
	ldx #106
	lda #118
	sta BAR,x
	ldx #118
	lda #225
	sta BAR,x
	ldx #225
	lda #245
	sta BAR,x
	ldx #245
	lda #244
	sta BAR,x
	ldx #244
	lda #229
	sta BAR,x
	ldx #229
	lda #224
	sta BAR,x
	ldx #224
	lda #231
	sta BAR,x
	ldx #231
	lda #234
	sta BAR,x
	ldx #234
	lda #246
	sta BAR,x
	ldx #246
	lda #97
	sta BAR,x
	ldx #97
	lda #117
	sta BAR,x
	ldx #117
	lda #116
	sta BAR,x
	ldx #116
	lda #101
	sta BAR,x
	ldx #101
	lda #96
	sta BAR,x

; initialize the screen chars
	lda		#96
	ldx		START
INIT_SCREEN_CHAR_LOOP:
	sta 	$0400,x
	inx
	cpx		END
	bne		INIT_SCREEN_CHAR_LOOP
; initialize the two rightmost screen chars
	dex
	lda		FULL_BLOCK
	sta		$0400,x
	dex
	sta		$0400,x

raster_timer:				; usually placed at $0840

	lda		#100
wait1: ; for scan line 0
	cmp 	$d012			; VIC raster counter
	bne		wait1

	inc		$d020			; change border color

; -------------------------------------------------------------------
; print all characters to the screen, starting in the top-left corner
;
; 1.023 Mcycles/sec / 60 frames/sec (NTSC) 		= 17,050 cycles/frame
; 17,050 cycles/frame / 263 raster-lines/frame 	= ~64.83 cycles/raster-line
; 2 cycles + (14 cycles/char * 256 chars) 	   	= 3,585 cycles in here
; 3,585 cycles / ~64.83 cycles/raster-line 	 	= ~55.3 raster lines
; Cycle counts from _Commodore 64 Programmer's Reference Guide_
; -------------------------------------------------------------------
; 	ldx		#0 				; x = 0						2 cycles
; print_loop:					; do
; 	txa						; 	a = x					2 cycles
; 	sta		$0400,x			; 	*(0x0400 + x) = a		5 cycles
; 	inx						; 	x++						2 cycles

; 	cpx		#0				; while (x != 0)			2 cycles
; 	bne		print_loop		;							3 cycles (I think)
; -------------------------------------------------------------------

; -------------------------------------------------------------------
; a small experiment for a text-mode, scrolling marquee
; See https://www.youtube.com/watch?v=6o9Hi_WrfIA
; -------------------------------------------------------------------

	ldy		START			; y = START
MARQUEE:					; do {
	lda		$0400,y
	tax						; x is the old character

							;   if (
	cpx		FULL_BLOCK		;       old_char == FULL_BLOCK 
	bne		ELSE
	iny
	lda		$0400,y
	dey
	cmp		EMPTY_BLOCK		;       && next_char != EMPTY_BLOCK) {
	beq		ELSE
	
	jmp    	FI              ;     screen[y] remains FULL_BLOCK
ELSE:                       ;   } else {
	lda		BAR,x			;
	sta		$0400,y			;     screen[y] = BAR[old_char] 
FI:							;   }	

	cpx		FULL_BLOCK		;   if (old_char == FULLBLOCK) {
	bne		NOT_FULL_BLOCK
	lda		#103			
	dey
	sta		$0400,y			;     prev_char = 103
	iny
NOT_FULL_BLOCK:				;   }

	iny						; y++
	cpy		END				; } while (y != END);

	rts						; STARTHERE
	bne		MARQUEE

; -------------------------------------------------------------------
; wait 55 more raster lines, for comparison
; It doesn't look like the math above is quite right, as this block
; is a little larger than this one, so the previous routine takes
; longer to run than predicted.
; -------------------------------------------------------------------
; 	inc 	$d020
; 	lda		#210			; artificially wait 55 scan lines
; wait2: ; for appointed scan line
; 	cmp		$d012			; VIC raster counter
; 	bne		wait2
; 	dec 	$d020			; reset border color
; -------------------------------------------------------------------
	
	dec 	$d020			; reset border color
	jmp 	raster_timer

	rts
.endproc
